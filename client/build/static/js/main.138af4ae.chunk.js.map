{"version":3,"sources":["CandyMachine/index.js","CandyMachine/connection.js","assets/images/twitter-logo.svg","App.js","index.js","CandyMachine/helpers.js"],"names":["SystemProgram","web3","opts","CandyMachine","walletAddress","useState","candyMachine","setCandyMachine","getCandyMachineCreator","a","candyMachineID","PublicKey","findProgramAddress","Buffer","from","toBuffer","candyMachineProgram","getMetadata","mint","TOKEN_METADATA_PROGRAM_ID","getMasterEdition","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","splTokenMintAddress","keys","pubkey","isSigner","isWritable","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","data","mintToken","Keypair","generate","getAtaForMint","publicKey","userTokenAccountAddress","state","tokenMint","userPayingAccountAddress","candyMachineAddress","id","remainingAccounts","signers","cleanupInstructions","MintLayout","span","program","provider","connection","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","instructions","gatekeeper","getNetworkToken","gatekeeperNetwork","push","expireOnUse","CIVIC","getNetworkExpire","whitelistMintSettings","whitelistToken","mode","burnEveryTime","whitelistBurnAuthority","getAccountInfo","createApproveInstruction","createRevokeInstruction","transferAuthority","price","toNumber","metadataAddress","masterEdition","candyMachineCreator","creatorBump","instruction","mintNft","accounts","wallet","treasury","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","length","undefined","sendTransactions","txs","map","t","txid","console","log","getCandyMachineState","getProvider","Program","fetchIdl","idl","account","fetch","process","REACT_APP_CANDY_MACHINE_ID","itemsAvailable","itemsRedeemed","itemsRemaining","goLiveData","goLiveDate","presale","Date","getTime","goLiveDateTimeString","toLocaleDateString","toLocaleTimeString","isSoldOut","isActive","endSettings","endSettingType","date","number","isPresale","hiddenSettings","rpcHost","REACT_APP_SOLANA_RPC_HOST","Connection","Provider","window","solana","useEffect","className","onClick","instructionSet","signersSet","sequenceType","commitment","successCallback","ind","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","transaction","Transaction","forEach","add","recentBlockhash","blockhash","setSigners","s","partialSign","signAllTransactions","signedTxns","pendingTxns","breakEarlyObject","breakEarly","signedTxnPromise","sendSignedTransaction","signedTransaction","then","slot","catch","reason","Promise","all","getUnixTs","DEFAULT_TIMEOUT","timeout","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","done","sleep","awaitTransactionSignatureConfirmation","confirmation","Error","err","error","simulateResult","simulateTransaction","value","logs","line","startsWith","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","message","result","queryStatus","status","confirmations","subId","resolve","reject","setTimeout","onSignature","context","e","getSignatureStatuses","signatureStatuses","_signatureSubscriptions","removeSignatureListener","ms","TWITTER_HANDLE","TWITTER_LINK","App","setWalletAddress","checkIfWalletIsConnected","isPhantom","connect","onlyIfTrusted","response","alert","connectWallet","onLoad","addEventListener","removeEventListener","alt","src","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById","anchor","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","buyer"],"mappings":"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","file":"static/js/main.138af4ae.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport { sendTransactions } from './connection';\nimport './CandyMachine.css';\nimport {\n  candyMachineProgram,\n  TOKEN_METADATA_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  CIVIC\n} from './helpers';\n\nconst { SystemProgram } = web3;\nconst opts = {\n  preflightCommitment: 'processed',\n};\n\n/**\n * CandyMachineコンポーネント\n * @param {*} param0 ウォレットのアドレス\n * @returns \n */\nconst CandyMachine = ({ walletAddress }) => {\n  // ステート変数\n  const [candyMachine, setCandyMachine] = useState(null);\n\n  const getCandyMachineCreator = async (candyMachine) => {\n    const candyMachineID = new PublicKey(candyMachine);\n    return await web3.PublicKey.findProgramAddress(\n        [Buffer.from('candy_machine'), candyMachineID.toBuffer()],\n        candyMachineProgram,\n    );\n  };\n\n  const getMetadata = async (mint) => {\n    return (\n      await PublicKey.findProgramAddress(\n        [\n          Buffer.from('metadata'),\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n          mint.toBuffer(),\n        ],\n        TOKEN_METADATA_PROGRAM_ID\n      )\n    )[0];\n  };\n\n  const getMasterEdition = async (mint) => {\n    return (\n      await PublicKey.findProgramAddress(\n        [\n          Buffer.from('metadata'),\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n          mint.toBuffer(),\n          Buffer.from('edition'),\n        ],\n        TOKEN_METADATA_PROGRAM_ID\n      )\n    )[0];\n  };\n  \n  const createAssociatedTokenAccountInstruction = (\n    associatedTokenAddress,\n    payer,\n    walletAddress,\n    splTokenMintAddress\n  ) => {\n    const keys = [\n      { pubkey: payer, isSigner: true, isWritable: true },\n      { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n      { pubkey: walletAddress, isSigner: false, isWritable: false },\n      { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n      {\n        pubkey: web3.SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      {\n        pubkey: web3.SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n    return new web3.TransactionInstruction({\n      keys,\n      programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n      data: Buffer.from([]),\n    });\n  };\n\n  const mintToken = async () => {\n    const mint = web3.Keypair.generate();\n\n    const userTokenAccountAddress = (\n      await getAtaForMint(mint.publicKey, walletAddress.publicKey)\n    )[0];\n  \n    const userPayingAccountAddress = candyMachine.state.tokenMint\n      ? (await getAtaForMint(candyMachine.state.tokenMint, walletAddress.publicKey))[0]\n      : walletAddress.publicKey;\n  \n    const candyMachineAddress = candyMachine.id;\n    const remainingAccounts = [];\n    const signers = [mint];\n    const cleanupInstructions = [];\n    const instructions = [\n      web3.SystemProgram.createAccount({\n        fromPubkey: walletAddress.publicKey,\n        newAccountPubkey: mint.publicKey,\n        space: MintLayout.span,\n        lamports:\n          await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n            MintLayout.span,\n          ),\n        programId: TOKEN_PROGRAM_ID,\n      }),\n      Token.createInitMintInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        0,\n        walletAddress.publicKey,\n        walletAddress.publicKey,\n      ),\n      createAssociatedTokenAccountInstruction(\n        userTokenAccountAddress,\n        walletAddress.publicKey,\n        walletAddress.publicKey,\n        mint.publicKey,\n      ),\n      Token.createMintToInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        userTokenAccountAddress,\n        walletAddress.publicKey,\n        [],\n        1,\n      ),\n    ];\n  \n    if (candyMachine.state.gatekeeper) {\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkToken(\n            walletAddress.publicKey,\n            candyMachine.state.gatekeeper.gatekeeperNetwork,\n          )\n        )[0],\n        isWritable: true,\n        isSigner: false,\n      });\n      if (candyMachine.state.gatekeeper.expireOnUse) {\n        remainingAccounts.push({\n          pubkey: CIVIC,\n          isWritable: false,\n          isSigner: false,\n        });\n        remainingAccounts.push({\n          pubkey: (\n            await getNetworkExpire(\n              candyMachine.state.gatekeeper.gatekeeperNetwork,\n            )\n          )[0],\n          isWritable: false,\n          isSigner: false,\n        });\n      }\n    }\n    if (candyMachine.state.whitelistMintSettings) {\n      const mint = new web3.PublicKey(\n        candyMachine.state.whitelistMintSettings.mint,\n      );\n  \n      const whitelistToken = (await getAtaForMint(mint, walletAddress.publicKey))[0];\n      remainingAccounts.push({\n        pubkey: whitelistToken,\n        isWritable: true,\n        isSigner: false,\n      });\n  \n      if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n        const whitelistBurnAuthority = web3.Keypair.generate();\n  \n        remainingAccounts.push({\n          pubkey: mint,\n          isWritable: true,\n          isSigner: false,\n        });\n        remainingAccounts.push({\n          pubkey: whitelistBurnAuthority.publicKey,\n          isWritable: false,\n          isSigner: true,\n        });\n        signers.push(whitelistBurnAuthority);\n        const exists =\n          await candyMachine.program.provider.connection.getAccountInfo(\n            whitelistToken,\n          );\n        if (exists) {\n          instructions.push(\n            Token.createApproveInstruction(\n              TOKEN_PROGRAM_ID,\n              whitelistToken,\n              whitelistBurnAuthority.publicKey,\n              walletAddress.publicKey,\n              [],\n              1,\n            ),\n          );\n          cleanupInstructions.push(\n            Token.createRevokeInstruction(\n              TOKEN_PROGRAM_ID,\n              whitelistToken,\n              walletAddress.publicKey,\n              [],\n            ),\n          );\n        }\n      }\n    }\n  \n    if (candyMachine.state.tokenMint) {\n      const transferAuthority = web3.Keypair.generate();\n  \n      signers.push(transferAuthority);\n      remainingAccounts.push({\n        pubkey: userPayingAccountAddress,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: transferAuthority.publicKey,\n        isWritable: false,\n        isSigner: true,\n      });\n  \n      instructions.push(\n        Token.createApproveInstruction(\n          TOKEN_PROGRAM_ID,\n          userPayingAccountAddress,\n          transferAuthority.publicKey,\n          walletAddress.publicKey,\n          [],\n          candyMachine.state.price.toNumber(),\n        ),\n      );\n      cleanupInstructions.push(\n        Token.createRevokeInstruction(\n          TOKEN_PROGRAM_ID,\n          userPayingAccountAddress,\n          walletAddress.publicKey,\n          [],\n        ),\n      );\n    }\n    const metadataAddress = await getMetadata(mint.publicKey);\n    const masterEdition = await getMasterEdition(mint.publicKey);\n  \n    const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n      candyMachineAddress,\n    );\n  \n    instructions.push(\n      await candyMachine.program.instruction.mintNft(creatorBump, {\n        accounts: {\n          candyMachine: candyMachineAddress,\n          candyMachineCreator,\n          payer: walletAddress.publicKey,\n          wallet: candyMachine.state.treasury,\n          mint: mint.publicKey,\n          metadata: metadataAddress,\n          masterEdition,\n          mintAuthority: walletAddress.publicKey,\n          updateAuthority: walletAddress.publicKey,\n          tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          systemProgram: SystemProgram.programId,\n          rent: web3.SYSVAR_RENT_PUBKEY,\n          clock: web3.SYSVAR_CLOCK_PUBKEY,\n          recentBlockhashes: web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          instructionSysvarAccount: web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n        },\n        remainingAccounts:\n          remainingAccounts.length > 0 ? remainingAccounts : undefined,\n      }),\n    );\n  \n    try {\n      return (\n        await sendTransactions(\n          candyMachine.program.provider.connection,\n          candyMachine.program.provider.wallet,\n          [instructions, cleanupInstructions],\n          [signers, []],\n        )\n      ).txs.map(t => t.txid);\n    } catch (e) {\n      console.log(e);\n    }\n    return [];\n  };\n\n  /**\n   * CandyMachineアカウントの情報を取得するメソッド\n   * ※ロード時に読み込まれる。\n   */\n  const getCandyMachineState = async () => {\n    // プロバイダーオブジェクトを取得する\n    const provider = getProvider();\n    //  デプロイされたCandy Machineプログラムのメタデータを取得する\n    const idl = await Program.fetchIdl(candyMachineProgram, provider);\n    const program = new Program(idl, candyMachineProgram, provider);\n\n    // Candy Machineからメタデータを取得する\n    const candyMachine = await program.account.candyMachine.fetch(process.env.REACT_APP_CANDY_MACHINE_ID);\n    //メタデータをすべて解析してログアウトする\n    // 発行できる上限値\n    const itemsAvailable = candyMachine.data.itemsAvailable.toNumber();\n    // 発行済みの数\n    const itemsRedeemed = candyMachine.itemsRedeemed.toNumber();\n    const itemsRemaining = itemsAvailable - itemsRedeemed;\n    const goLiveData = candyMachine.data.goLiveDate.toNumber();\n    // プレセールの設定\n    const presale =\n      candyMachine.data.whitelistMintSettings &&\n      candyMachine.data.whitelistMintSettings.presale &&\n      (!candyMachine.data.goLiveDate ||\n        candyMachine.data.goLiveDate.toNumber() > new Date().getTime() / 1000);\n    // ドロップが可能になる日時を取得\n    const goLiveDateTimeString = `${new Date(goLiveData * 1000).toLocaleDateString()} @ ${new Date(goLiveData * 1000).toLocaleTimeString()}`;\n    \n    // ステート変数を更新する。\n    setCandyMachine({\n      id: process.env.REACT_APP_CANDY_MACHINE_ID,\n      program,\n      state: {\n        itemsAvailable,\n        itemsRedeemed,\n        itemsRemaining,\n        goLiveData,\n        goLiveDateTimeString,\n        isSoldOut: itemsRemaining === 0,\n        isActive:\n          (presale ||\n            candyMachine.data.goLiveDate.toNumber() < new Date().getTime() / 1000) &&\n          (candyMachine.endSettings\n            ? candyMachine.endSettings.endSettingType.date\n              ? candyMachine.endSettings.number.toNumber() > new Date().getTime() / 1000\n              : itemsRedeemed < candyMachine.endSettings.number.toNumber()\n            : true),\n        isPresale: presale,\n        goLiveDate: candyMachine.data.goLiveDate,\n        treasury: candyMachine.wallet,\n        tokenMint: candyMachine.tokenMint,\n        gatekeeper: candyMachine.data.gatekeeper,\n        endSettings: candyMachine.data.endSettings,\n        whitelistMintSettings: candyMachine.data.whitelistMintSettings,\n        hiddenSettings: candyMachine.data.hiddenSettings,\n        price: candyMachine.data.price,\n      },\n    });\n\n    console.log({\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      goLiveData,\n      goLiveDateTimeString,\n      presale,\n    });\n  }\n\n  /**\n   * プロバイダーオブジェクトを取得するメソッド\n   */\n  const getProvider = () => {\n    const rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST;\n    // connectionオブジェクトを作成\n    const connection = new Connection(rpcHost);\n\n    // provider オブジェクトを作成する\n    const provider = new Provider(\n      connection,\n      window.solana,\n      opts.preflightCommitment\n    );\n\n    return provider;\n  };\n\n  useEffect(() => {\n    getCandyMachineState();\n  }, []);\n\n  return candyMachine ? (\n    <div className=\"machine-container\">\n      <p>{`Drop Date: ${candyMachine.state.goLiveDateTimeString}`}</p>\n      <p>{`Items Minted: ${candyMachine.state.itemsRedeemed} / ${candyMachine.state.itemsAvailable}`}</p>\n      <button className=\"cta-button mint-button\" onClick={mintToken}>\n        Mint NFT\n      </button>\n    </div>\n  ) : null\n};\n\nexport default CandyMachine;","import { Transaction } from '@solana/web3.js';\n\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\n\nexport const getErrorForTransaction = async (\n  connection,\n  txid\n) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, 'max');\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach(log => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\n\nexport async function sendTransactionsWithManualRetry(\n  connection,\n  wallet,\n  instructions,\n  signers,\n){\n  let stopPoint = 0;\n  let tries = 0;\n  let lastInstructionsLength = null;\n  let toRemoveSigners = {};\n  instructions = instructions.filter((instr, i) => {\n    if (instr.length > 0) {\n      return true;\n    } else {\n      toRemoveSigners[i] = true;\n      return false;\n    }\n  });\n  let ids = [];\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n  while (stopPoint < instructions.length && tries < 3) {\n    instructions = instructions.slice(stopPoint, instructions.length);\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\n    else tries = 0;\n\n    try {\n      if (instructions.length === 1) {\n        const id = await sendTransactionWithRetry(\n          connection,\n          wallet,\n          instructions[0],\n          filteredSigners[0],\n          'single',\n        );\n        ids.push(id.txid);\n        stopPoint = 1;\n      } else {\n        const { txs } = await sendTransactions(\n          connection,\n          wallet,\n          instructions,\n          filteredSigners,\n          'StopOnFailure',\n          'single',\n        );\n        ids = ids.concat(txs.map(t => t.txid));\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    console.log(\n      'Died on ',\n      stopPoint,\n      'retrying from instruction',\n      instructions[stopPoint],\n      'instructions length is',\n      instructions.length,\n    );\n    lastInstructionsLength = instructions.length;\n  }\n\n  return ids;\n}\n\nexport const sendTransactions = async (\n  connection,\n  wallet,\n  instructionSet,\n  signersSet,\n  sequenceType = 'Parallel',\n  commitment = 'singleGossip',\n  successCallback = (txid, ind) => {},\n  failCallback = (txid, ind) => false,\n  block,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  const unsignedTxns = [];\n\n  if (!block) {\n    block = await connection.getRecentBlockhash(commitment);\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    let transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = block.blockhash;\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n\n  const signedTxns = await wallet.signAllTransactions(unsignedTxns);\n\n  const pendingTxns= [];\n\n  let breakEarlyObject = { breakEarly: false, i: 0 };\n  console.log(\n    'Signed txns length',\n    signedTxns.length,\n    'vs handed in length',\n    instructionSet.length,\n  );\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i],\n    });\n\n    signedTxnPromise\n      .then(({ txid, slot }) => {\n        successCallback(txid, i);\n      })\n      .catch(reason => {\n        failCallback(signedTxns[i], i);\n        if (sequenceType === 'StopOnFailure') {\n          breakEarlyObject.breakEarly = true;\n          breakEarlyObject.i = i;\n        }\n      });\n\n    if (sequenceType !== 'Parallel') {\n      try {\n        await signedTxnPromise;\n      } catch (e) {\n        console.log('Caught failure', e);\n        if (breakEarlyObject.breakEarly) {\n          console.log('Died on ', breakEarlyObject.i);\n          // Return the txn we failed on by index\n          return {\n            number: breakEarlyObject.i,\n            txs: await Promise.all(pendingTxns),\n          };\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== 'Parallel') {\n    await Promise.all(pendingTxns);\n  }\n\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\n};\n\nexport const sendTransaction = async (\n  connection,\n  wallet,\n  instructions,\n  signers,\n  awaitConfirmation = true,\n  commitment = 'singleGossip',\n  includesFeePayer = false,\n  block,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  const rawTransaction = transaction.serialize();\n  let options = {\n    skipPreflight: true,\n    commitment,\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  let slot = 0;\n\n  if (awaitConfirmation) {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      DEFAULT_TIMEOUT,\n      connection,\n      commitment,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n    slot = confirmation?.slot || 0;\n\n    if (confirmation?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n\n      console.log(errors);\n      throw new Error(`Raw transaction ${txid} failed`);\n    }\n  }\n\n  return { txid, slot };\n};\n\nexport const sendTransactionWithRetry = async (\n  connection,\n  wallet,\n  instructions,\n  signers,\n  commitment = 'singleGossip',\n  includesFeePayer = false,\n  block,\n  beforeSend,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  const { txid, slot } = await sendSignedTransaction({\n    connection,\n    signedTransaction: transaction,\n  });\n\n  return { txid, slot };\n};\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nconst DEFAULT_TIMEOUT = 15000;\n\nexport async function sendSignedTransaction({\n  signedTransaction,\n  connection,\n  timeout = DEFAULT_TIMEOUT,\n}) {\n  const rawTransaction = signedTransaction.serialize();\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid = await connection.sendRawTransaction(\n    rawTransaction,\n    {\n      skipPreflight: true,\n    },\n  );\n\n  console.log('Started awaiting confirmation for', txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      timeout,\n      connection,\n      'recent',\n      true,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error('Transaction failed: Custom instruction error');\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err) {\n    console.error('Timeout Error caught', err);\n    if (err.timeout) {\n      throw new Error('Timed out awaiting confirmation on transaction');\n    }\n    let simulateResult = null;\n    try {\n      simulateResult = (\n        await simulateTransaction(connection, signedTransaction, 'single')\n      ).value;\n    } catch (e) {}\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith('Program log: ')) {\n            throw new Error(\n              'Transaction failed: ' + line.slice('Program log: '.length),\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  console.log('Latency', txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n  connection,\n  transaction,\n  commitment,\n) {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching,\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString('base64');\n  const config = { encoding: 'base64', commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest('simulateTransaction', args);\n  if (res.error) {\n    throw new Error('failed to simulate transaction: ' + res.error.message);\n  }\n  return res.result;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n  txid,\n  timeout,\n  connection,\n  commitment = 'recent',\n  queryStatus = false,\n){\n  let done = false;\n  let status = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log('Rejected via websocket', result.err);\n            reject(status);\n          } else {\n            console.log('Resolved via websocket', result);\n            resolve(status);\n          }\n        },\n        commitment,\n      );\n    } catch (e) {\n      done = true;\n      console.error('WS error in setup', txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId])\n    connection.removeSignatureListener(subId);\n  done = true;\n  console.log('Returning status', status);\n  return status;\n}\nexport function sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport twitterLogo from './assets/images/twitter-logo.svg';\nimport CandyMachine from \"./CandyMachine\";\n\n// Constants\nconst TWITTER_HANDLE = 'HARUKI05758694';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\n/**\n * APPコンポーネント\n */\nconst App = () => {\n  // ステート変数\n  const [walletAddress, setWalletAddress] = useState(null);\n\n  /**\n   * ウォレットの接続状態を確認するメソッド\n   */\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana && solana.isPhantom) {\n        console.log(\"Phantom wallet found!\");\n        const response = await solana.connect({ onlyIfTrusted: true });\n        console.log(\"Connected with Public Key:\", response.publicKey.toString());\n        // ステート変数を更新\n        setWalletAddress(response.publicKey.toString());\n      } else {\n        alert(\"Solana object not found! Get a Phantom Wallet 👻\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n\n  /**\n   * 「Connect to Wallet」ボタンを押したときの処理\n   */\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      // solanaオブジェクトに接続する。\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      // ステート変数を更新\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  /**\n   * renderNotConnectedContainerコンポーネント\n   */\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  // 副作用フック\n  useEffect(() => {\n    // onLoadメソッド\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    // ロードされたタイミングで呼び出す。\n    window.addEventListener(\"load\", onLoad);\n    return () => window.removeEventListener(\"load\", onLoad);\n  }, []);\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header\">🍭 Candy Drop</p>\n          <p className=\"sub-text\">NFT drop machine with fair mint</p>\n          {!walletAddress && renderNotConnectedContainer()}\n        </div>\n        {walletAddress && <CandyMachine walletAddress={window.solana} />}\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import { web3 } from '@project-serum/anchor';\nimport * as anchor from '@project-serum/anchor';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport {\n  LAMPORTS_PER_SOL,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js';\n\n// CLI Properties Given to us\nconst candyMachineProgram = new web3.PublicKey(\n  'cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ'\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new web3.PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'\n);\n\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new web3.PublicKey(\n  'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'\n);\n\nconst CIVIC = new anchor.web3.PublicKey(\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\n);\n\nconst toDate = (value) => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nconst formatNumber = {\n  format: (val) => {\n    if (!val) {\n      return '--';\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: (val) => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  },\n};\n\nconst getAtaForMint = async (mint, buyer)=> {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  );\n};\n\nconst getNetworkExpire = async (gatekeeperNetwork) => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\n    CIVIC,\n  );\n};\n\nconst getNetworkToken = async (wallet, gatekeeperNetwork) => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      wallet.toBuffer(),\n      Buffer.from('gateway'),\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\n      gatekeeperNetwork.toBuffer(),\n    ],\n    CIVIC,\n  );\n};\n\nfunction createAssociatedTokenAccountInstruction(\n  associatedTokenAddress,\n  payer,\n  walletAddress,\n  splTokenMintAddress,\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n\nexport {\n  candyMachineProgram,\n  TOKEN_METADATA_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  CIVIC,\n  toDate,\n  formatNumber,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  createAssociatedTokenAccountInstruction,\n};\n"],"sourceRoot":""}